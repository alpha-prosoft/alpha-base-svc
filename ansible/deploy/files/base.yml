AWSTemplateFormatVersion: 2010-09-09
Description: Daemon cluster node
Parameters:
  ServiceName:
    Type: String

  EnvironmentNameUpper:
    Type: String
  EnvironmentNameLower:
    Type: String
  VPCId:
    Type: String

  PublicHostedZoneId:
    Type: String
  PublicHostedZoneName:
    Type: String


  PrivateSubnet1A:
    Type: String
  PrivateSubnet2A:
    Type: String

  LoadBalancerScheme:
    Type: String

  GlobalCertificateArn:
    Type: String

Resources:

  ConfigurationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketName: !Sub "${AWS::AccountId}-${EnvironmentNameLower}-configuration"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BucketPolicyData:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AccountReadAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${ConfigurationBucket}/*"
      Bucket: !Ref ConfigurationBucket

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${PublicHostedZoneName}"
      DomainValidationOptions:
        - DomainName: !Sub "*.${PublicHostedZoneName}"
          HostedZoneId: !Ref PublicHostedZoneId
      ValidationMethod: DNS

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCId
      GroupDescription: "Public LB Group"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: TCP
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentNameUpper}-LB"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentNameUpper}-LB"
      Subnets:
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: 'routing.http2.enabled'
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentNameUpper}-LB"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      SslPolicy: "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      Certificates:
        - CertificateArn: !Ref Certificate
      Protocol: HTTPS
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "You've reached the listener! Congrats! Now please leave :)"
            StatusCode: "200"


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: "COGNITO_DEFAULT"
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          Mutable: true
          Required: true
        - Name: name
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 1
      UserPoolAddOns:
        AdvancedSecurityMode: "AUDIT"
      UserPoolName: !Sub "${EnvironmentNameLower}-${ServiceName}-userpool"


  AuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - client_credentials
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      ClientName: !Sub "${EnvironmentNameLower}-${ServiceName}-userpoolclient"
      GenerateSecret: True
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool

  GroupNonInteractive:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Non Interactive"
      GroupName: "non-interactive"
      UserPoolId: !Ref UserPool

  GroupAdministrators:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Administrators"
      GroupName: "administrators"
      UserPoolId: !Ref UserPool

  GroupDevelopers:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Developers"
      GroupName: "developers"
      UserPoolId: !Ref UserPool


  GetDistributionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cognito-idp:DescribeUserPoolDomain
                Resource: '*'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  GetDistributionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentNameUpper}-get-distribution'
      Handler: "index.handler"
      Timeout: 30
      Role: !GetAtt GetDistributionFunctionRole.Arn
      Runtime: python3.13
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
      
          cognito = boto3.client('cognito-idp')
          
          def handler(event, context):
            responseData = {}
            response = ""
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              domain = event['ResourceProperties']['Domain']
              response = cognito.describe_user_pool_domain(Domain=domain)
              distribution = response['DomainDescription']['CloudFrontDistribution']
              responseData["CloudFrontDistribution"]= distribution
              response = responseData['CloudFrontDistribution']
              
            logger.info('responseData {}'.format(responseData))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, response)


  GetCloudFrontDistribution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GetDistributionFunction.Arn
      Domain: !Ref UserPoolDomain

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "ops-auth.${PublicHostedZoneName}"
      CustomDomainConfig:
        CertificateArn: !Ref GlobalCertificateArn

  UserPoolDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub "${PublicHostedZoneId}."
      Name: !Ref UserPoolDomain
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt GetCloudFrontDistribution.CloudFrontDistribution
        EvaluateTargetHealth: false

  UserPoolClientSecret:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import base64
          import json
          import logging
          import string
          import random
          import boto3
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def random_string(size=6):
            return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(size))
          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            responseData = {}
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              client = boto3.client('cognito-idp')
              response = client.describe_user_pool_client(
                  UserPoolId=event['ResourceProperties'].get('UserPoolId', 6),
                  ClientId=event['ResourceProperties'].get('ClientId', 6)
              )
              responseData['ClientSecret'] = response['UserPoolClient']['ClientSecret']
            logger.info('responseData {}'.format(responseData))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, responseData['ClientSecret'])
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentNameUpper}-user-pool-client-secret'
      Handler: "index.lambda_handler"
      Timeout: 30
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.13


  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "lambda-logs"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                Resource:
                  - "*"

Outputs:
  LoadBalancerArn:
    Value: !Ref LoadBalancer

  LoadBalancerListenerArn:
    Value: !Ref LoadBalancerListener

  LoadBalancerSecurityGroup:
    Value: !Ref LoadBalancerSecurityGroup

  LoadBalancerCanonicalHostedZoneID:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID

  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName

  AuthUserPoolDomain:
    Value: !Sub "ops-auth.${PublicHostedZoneName}"

  AuthUserPoolId:
    Value: !Ref UserPool

  AuthUserPoolClientId:
    Value: !Ref AuthUserPoolClient

  UserPoolClientSecretResource:
    Value: !GetAtt UserPoolClientSecret.Arn

  CertificateArn:
    Value: !Ref Certificate 

